fastlane_version "2.208.0"

default_platform :ios

platform :ios do

  desc "以 development 方式打包并上传到蒲公英"
  lane :test_beta do


     result3 = FastlaneCore::CommandExecutor.execute(command: "rm -rf ./../archive")
     UI.message "result3:#{result3}"



    puts "以 development 方式打包"
    gym(
      # 指定打包所使用的输出方式 (可选: app-store, package, ad-hoc, enterprise, development)
      export_method: "development",
      # 指定项目的 scheme 名称
      scheme: "Runner",
      # 指定输出的文件夹地址
      output_directory: "./archive/test_beta/",

      #output_directory: "./archive/test_beta/" + Time.new.strftime("%Y-%m-%d-%H:%M:%S"),
    )


  #  puts "发送ipa安装包给测试"
   #  resul8 = FastlaneCore::CommandExecutor.execute(command: "pwd")
   #  UI.message "resul8:#{resul8}"


    # resul6 = FastlaneCore::CommandExecutor.execute(command: "export https_proxy=socks5://127.0.0.1:7890")
    # UI.message "resul6:#{resul6}"


   #  resul5 = FastlaneCore::CommandExecutor.execute(command: "curl -s -X POST https://api.telegram.org/bot5788548346:AAGg2gX78imRP4tuK1Q4S_sPHRB4mMvUNfA/sendMessage  -d chat_id=5482933712 -d text=12312312312312312312312312321 ")
   #  UI.message "result9:#{result9}"



   #  resul5 = FastlaneCore::CommandExecutor.execute(command: "curl -s -X POST https://api.telegram.org/bot5788548346:AAGg2gX78imRP4tuK1Q4S_sPHRB4mMvUNfA/sendMessage  -F chat_id=5482933712 -F caption=Run Script  -F document=./../archive/test_beta/apolloLive.ipa  ")
   #  UI.message "result5:#{result5}"




    puts "上传符号表到  firebase"

     result4 = FastlaneCore::CommandExecutor.execute(command: "./../Pods/FirebaseCrashlytics/upload-symbols -gsp ./GoogleService-Info.plist -p ios ./../archive/test_beta/apolloLive.app.dSYM.zip")
     UI.message "result4:#{result4}"

	

    #puts "上传 ipa 包到蒲公英"
   # pgyer(
      # 蒲公英 API KEY
    #  api_key: "",
      # 蒲公英 USER KEY
     # password: ""
   # )

  end

  desc "以 ad-hoc 方式打包并上传到蒲公英"
  lane :beta do
    puts "自动生成 Provisioning Profiles 文件"
    sigh(
      # 指定输出的文件夹地址
      output_path: "./archive/sign",
      # 是否为 AdHoc 证书（设为 false 或不写默认为 AppStore 证书）
      adhoc: true
    )

    puts "以 ad-hoc 方式打包"
    gym(
      # 指定打包所使用的输出方式 (可选: app-store, package, ad-hoc, enterprise, development)
      export_method: "ad-hoc",
      # 指定项目的 scheme 名称
      scheme: "Runner",
      # 指定输出的文件夹地址
      output_directory: "./archive/beta/" + Time.new.strftime("%Y-%m-%d-%H:%M:%S"),
      # 指定打包方式 (可选: Release, Debug)
      configuration: "Release"
    )
    # puts "上传 ipa 包到蒲公英"
    # pgyer(
      # 蒲公英 API KEY
    #   api_key: "",
      # 蒲公英 USER KEY
     #  user_key: ""
   #  )

  puts "上传符号表到  firebase"

     result4 = FastlaneCore::CommandExecutor.execute(command: "./../Pods/FirebaseCrashlytics/upload-symbols -gsp ./GoogleService-Info.plist -p ios ./../archive/test_beta/apolloLive.app.dSYM.zip")
     UI.message "result4:#{result4}"

  end

  desc "以 app-store 方式打包并上传到 iTunes Connect"
  lane :release do

    puts "自动生成 Provisioning Profiles 文件"
    sigh(
      # 指定输出的文件夹地址
      output_path: "./archive/sign"
    )

    puts "以 app-store 方式打包"
    gym(
      # 指定打包所使用的输出方式 (可选: app-store, package, ad-hoc, enterprise, development)
      export_method: "app-store",
      # 指定项目的 scheme 名称
      scheme: "xxx",
      # 指定输出的文件夹地址
      output_directory: "./archive/release/" + Time.new.strftime("%Y-%m-%d-%H:%M:%S"),
      # 指定打包方式 (可选: Release, Debug)
      configuration: "Release"
    )

    puts "上传 ipa 包到 iTunes Connect"
    deliver(
      # 跳过截图上传
      skip_screenshots: true,
      # 跳过元数据上传
      skip_metadata: true,
      # 跳过审核直接上传
      force: true
    )

  end

end
